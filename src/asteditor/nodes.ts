import ts, { SyntaxKind } from "typescript";

export class Block {
  constructor(public content: Element[], public classes: string = "") {}
}

export class Inline {
  constructor(public content: Element[], public classes: string = "") {}
}

function joinNodes(nodes: ts.NodeArray<ts.Node>, delimiter: string): Element[] {
  return nodes.flatMap((node, i) => {
    if (i !== 0) {
      return [delimiter, node];
    }
    return node;
  });
}

function debugNode(node: ts.Node) {
  return new Block([ts.SyntaxKind[node.kind], " (", node.kind.toString(), ")"]);
}

function keyword(...content: Element[]) {
  return new Inline(content, "keyword");
}

export function isTsNode(element: Element): element is ts.Node {
  return element.hasOwnProperty("kind");
}

export function isStatement(node: ts.Node) {
  return (
    (node.kind >= SyntaxKind.FirstStatement &&
      node.kind <= SyntaxKind.LastStatement) ||
    ts.isBlock(node) ||
    ts.isEmptyStatement(node)
  );
}

export type Element = Block | Inline | ts.Node | string;

export const nodes: Record<SyntaxKind, (node: any) => Element> = {
  0: debugNode,
  1: debugNode,
  2: debugNode,
  3: debugNode,
  4: debugNode,
  5: debugNode,
  6: debugNode,
  7: debugNode,
  [SyntaxKind.NumericLiteral]: (node: ts.NumericLiteral) =>
    new Inline([node.text], "numeric-literal"),
  9: debugNode,
  [SyntaxKind.StringLiteral]: (node: ts.StringLiteral) =>
    new Inline(['"', node.text, '"'], "string-literal"),
  11: debugNode,
  12: debugNode,
  13: debugNode,
  14: debugNode,
  15: debugNode,
  16: debugNode,
  17: debugNode,
  18: debugNode,
  19: debugNode,
  20: debugNode,
  21: debugNode,
  22: debugNode,
  23: debugNode,
  24: debugNode,
  25: debugNode,
  26: debugNode,
  27: debugNode,
  28: debugNode,
  [SyntaxKind.LessThanToken]: (
    node: ts.PunctuationToken<SyntaxKind.LessThanToken>
  ) => "<",
  30: debugNode,
  [SyntaxKind.GreaterThanToken]: (
    node: ts.PunctuationToken<SyntaxKind.GreaterThanToken>
  ) => ">",
  32: debugNode,
  33: debugNode,
  34: debugNode,
  35: debugNode,
  36: debugNode,
  37: debugNode,
  38: debugNode,
  [SyntaxKind.PlusToken]: (node: ts.PlusToken) => "+",
  40: debugNode,
  41: debugNode,
  42: debugNode,
  43: debugNode,
  44: debugNode,
  45: debugNode,
  46: debugNode,
  47: debugNode,
  48: debugNode,
  49: debugNode,
  50: debugNode,
  51: debugNode,
  52: debugNode,
  53: debugNode,
  54: debugNode,
  55: debugNode,
  56: debugNode,
  57: debugNode,
  58: debugNode,
  59: debugNode,
  60: debugNode,
  61: debugNode,
  62: debugNode,
  63: debugNode,
  64: debugNode,
  65: debugNode,
  66: debugNode,
  67: debugNode,
  68: debugNode,
  69: debugNode,
  70: debugNode,
  71: debugNode,
  72: debugNode,
  73: debugNode,
  74: debugNode,
  75: debugNode,
  76: debugNode,
  77: debugNode,
  78: debugNode,
  [SyntaxKind.Identifier]: (node: ts.Identifier) =>
    new Inline([ts.unescapeLeadingUnderscores(node.escapedText)], "identifier"),
  80: debugNode,
  81: debugNode,
  82: debugNode,
  83: debugNode,
  84: debugNode,
  85: debugNode,
  86: debugNode,
  87: debugNode,
  88: debugNode,
  89: debugNode,
  90: debugNode,
  91: debugNode,
  92: debugNode,
  93: debugNode,
  94: debugNode,
  95: debugNode,
  96: debugNode,
  97: debugNode,
  98: debugNode,
  99: debugNode,
  100: debugNode,
  101: debugNode,
  102: debugNode,
  103: debugNode,
  104: debugNode,
  105: debugNode,
  106: debugNode,
  107: debugNode,
  108: debugNode,
  109: debugNode,
  [SyntaxKind.TrueKeyword]: (node: ts.TrueLiteral) => keyword("true"),
  111: debugNode,
  112: debugNode,
  113: debugNode,
  114: debugNode,
  115: debugNode,
  116: debugNode,
  117: debugNode,
  118: debugNode,
  119: debugNode,
  120: debugNode,
  121: debugNode,
  122: debugNode,
  123: debugNode,
  124: debugNode,
  125: debugNode,
  126: debugNode,
  127: debugNode,
  128: debugNode,
  129: debugNode,
  130: debugNode,
  131: debugNode,
  132: debugNode,
  133: debugNode,
  134: debugNode,
  135: debugNode,
  136: debugNode,
  137: debugNode,
  138: debugNode,
  139: debugNode,
  140: debugNode,
  141: debugNode,
  142: debugNode,
  143: debugNode,
  144: debugNode,
  145: debugNode,
  146: debugNode,
  147: debugNode,
  148: debugNode,
  149: debugNode,
  150: debugNode,
  151: debugNode,
  152: debugNode,
  153: debugNode,
  154: debugNode,
  155: debugNode,
  156: debugNode,
  157: debugNode,
  158: debugNode,
  159: debugNode,
  160: debugNode,
  161: debugNode,
  162: debugNode,
  [SyntaxKind.Parameter]: (node: ts.ParameterDeclaration) => node.name,
  164: debugNode,
  165: debugNode,
  166: debugNode,
  167: debugNode,
  168: debugNode,
  169: debugNode,
  170: debugNode,
  171: debugNode,
  172: debugNode,
  173: debugNode,
  174: debugNode,
  175: debugNode,
  176: debugNode,
  177: debugNode,
  178: debugNode,
  179: debugNode,
  180: debugNode,
  181: debugNode,
  182: debugNode,
  183: debugNode,
  184: debugNode,
  185: debugNode,
  186: debugNode,
  187: debugNode,
  188: debugNode,
  189: debugNode,
  190: debugNode,
  191: debugNode,
  192: debugNode,
  193: debugNode,
  194: debugNode,
  195: debugNode,
  196: debugNode,
  197: debugNode,
  198: debugNode,
  199: debugNode,
  200: debugNode,
  201: debugNode,
  202: debugNode,
  203: debugNode,
  204: debugNode,
  [SyntaxKind.PropertyAccessExpression]: (node: ts.PropertyAccessExpression) =>
    new Inline([node.expression, ".", node.name]),
  206: debugNode,
  [SyntaxKind.CallExpression]: (node: ts.CallExpression) =>
    new Inline([node.expression, "(", ...joinNodes(node.arguments, ", "), ")"]),
  208: debugNode,
  209: debugNode,
  210: debugNode,
  211: debugNode,
  212: debugNode,
  [SyntaxKind.ArrowFunction]: (node: ts.ArrowFunction) =>
    new Inline([
      keyword("function"),
      "(",
      ...joinNodes(node.parameters, ", "),
      "): ",
      node.body,
    ]),
  214: debugNode,
  215: debugNode,
  216: debugNode,
  217: debugNode,
  218: debugNode,
  219: debugNode,
  [SyntaxKind.BinaryExpression]: (node: ts.BinaryExpression) =>
    new Inline([node.left, " ", node.operatorToken, " ", node.right]),
  221: debugNode,
  222: debugNode,
  223: debugNode,
  224: debugNode,
  225: debugNode,
  226: debugNode,
  227: debugNode,
  228: debugNode,
  229: debugNode,
  230: debugNode,
  231: debugNode,
  232: debugNode,
  233: debugNode,
  [SyntaxKind.Block]: (node: ts.Block) =>
    new Block([...node.statements], "indent"),
  235: debugNode,
  [SyntaxKind.VariableStatement]: (node: ts.VariableStatement) =>
    node.declarationList,
  [SyntaxKind.ExpressionStatement]: (node: ts.ExpressionStatement) =>
    new Block([node.expression]),
  [SyntaxKind.IfStatement]: (node: ts.IfStatement) =>
    new Block([keyword("if"), " ", node.expression, ": ", node.thenStatement]),
  239: debugNode,
  [SyntaxKind.WhileStatement]: (node: ts.WhileStatement) =>
    new Block([keyword("while"), " ", node.expression, ": ", node.statement]),
  241: debugNode,
  242: debugNode,
  243: debugNode,
  244: debugNode,
  245: debugNode,
  246: debugNode,
  247: debugNode,
  248: debugNode,
  249: debugNode,
  250: debugNode,
  251: debugNode,
  252: debugNode,
  [SyntaxKind.VariableDeclaration]: (node: ts.VariableDeclaration) =>
    new Inline([
      node.name,
      ...(node.initializer ? [" = ", node.initializer] : []),
    ]),
  [SyntaxKind.VariableDeclarationList]: (node: ts.VariableDeclarationList) =>
    new Inline([keyword("let"), " ", ...joinNodes(node.declarations, ", ")]),
  [SyntaxKind.FunctionDeclaration]: (node: ts.FunctionDeclaration) =>
    new Block([
      keyword("function"),
      " ",
      ...(node.name ? [node.name] : []),
      "(",
      ...joinNodes(node.parameters, ", "),
      "): ",
      node.body ?? keyword("pass"),
    ]),
  256: debugNode,
  257: debugNode,
  258: debugNode,
  259: debugNode,
  260: debugNode,
  261: debugNode,
  262: debugNode,
  263: debugNode,
  264: debugNode,
  [SyntaxKind.ImportDeclaration]: (node: ts.ImportDeclaration) =>
    new Block([
      keyword("import"),
      " ",
      ...(node.importClause
        ? [node.importClause, " ", keyword("from"), " "]
        : []),
      node.moduleSpecifier,
    ]),
  [SyntaxKind.ImportClause]: (node: ts.ImportClause) =>
    new Inline(
      [
        node.name ?? [],
        node.name && node.namedBindings ? [", "] : [],
        node.namedBindings ?? [],
      ].flat()
    ),
  267: debugNode,
  [SyntaxKind.NamedImports]: (node: ts.NamedImports) =>
    new Inline(["{ ", ...node.elements, " }"]),
  [SyntaxKind.ImportSpecifier]: (node: ts.ImportSpecifier) =>
    new Inline([node.name]),
  270: debugNode,
  271: debugNode,
  272: debugNode,
  273: debugNode,
  274: debugNode,
  275: debugNode,
  276: debugNode,
  277: debugNode,
  278: debugNode,
  279: debugNode,
  280: debugNode,
  281: debugNode,
  282: debugNode,
  283: debugNode,
  284: debugNode,
  285: debugNode,
  286: debugNode,
  287: debugNode,
  288: debugNode,
  289: debugNode,
  290: debugNode,
  291: debugNode,
  292: debugNode,
  293: debugNode,
  294: debugNode,
  295: debugNode,
  296: debugNode,
  297: debugNode,
  298: debugNode,
  299: debugNode,
  300: debugNode,
  301: debugNode,
  302: debugNode,
  [SyntaxKind.SourceFile]: (node: ts.SourceFile) =>
    new Block([...node.statements]),
  304: debugNode,
  305: debugNode,
  306: debugNode,
  307: debugNode,
  308: debugNode,
  309: debugNode,
  310: debugNode,
  311: debugNode,
  312: debugNode,
  313: debugNode,
  314: debugNode,
  315: debugNode,
  316: debugNode,
  317: debugNode,
  318: debugNode,
  319: debugNode,
  320: debugNode,
  321: debugNode,
  322: debugNode,
  323: debugNode,
  324: debugNode,
  325: debugNode,
  326: debugNode,
  327: debugNode,
  328: debugNode,
  329: debugNode,
  330: debugNode,
  331: debugNode,
  332: debugNode,
  333: debugNode,
  334: debugNode,
  335: debugNode,
  336: debugNode,
  337: debugNode,
  338: debugNode,
  339: debugNode,
  340: debugNode,
  341: debugNode,
  342: debugNode,
  343: debugNode,
  344: debugNode,
  345: debugNode,
  346: debugNode,
  347: debugNode,
  348: debugNode,
  349: debugNode,
  350: debugNode,
  351: debugNode,
  352: debugNode,
  353: debugNode,
};
