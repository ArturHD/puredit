import ts, { SyntaxKind } from "typescript";

export class Block {
  constructor(public classes: string, public content: Element[]) {}
}

export class Inline {
  constructor(public classes: string, public content: Element[]) {}
}

export class PropertyNode {
  constructor(public selector: string) {}
}

export class EachNode {
  constructor(public selector: string, public delimiter: string = "") {}
}

export class TextNode {
  constructor(public selector: string) {}
}

export class DebugNode {
  constructor() {}
}

export type Element =
  | Block
  | Inline
  | PropertyNode
  | TextNode
  | EachNode
  | DebugNode
  | string;

export const nodes: Record<SyntaxKind, Element> = {
  0: new DebugNode(),
  1: new DebugNode(),
  2: new DebugNode(),
  3: new DebugNode(),
  4: new DebugNode(),
  5: new DebugNode(),
  6: new DebugNode(),
  7: new DebugNode(),
  [SyntaxKind.NumericLiteral]: new Inline("numeric-literal", [
    new TextNode("text"),
  ]),
  9: new DebugNode(),
  [SyntaxKind.StringLiteral]: new Inline("string-literal", [
    '"',
    new TextNode("text"),
    '"',
  ]),
  11: new DebugNode(),
  12: new DebugNode(),
  13: new DebugNode(),
  14: new DebugNode(),
  15: new DebugNode(),
  16: new DebugNode(),
  17: new DebugNode(),
  18: new DebugNode(),
  19: new DebugNode(),
  20: new DebugNode(),
  21: new DebugNode(),
  22: new DebugNode(),
  23: new DebugNode(),
  24: new DebugNode(),
  25: new DebugNode(),
  26: new DebugNode(),
  27: new DebugNode(),
  28: new DebugNode(),
  [SyntaxKind.LessThanToken]: "<",
  30: new DebugNode(),
  [SyntaxKind.GreaterThanToken]: ">",
  32: new DebugNode(),
  33: new DebugNode(),
  34: new DebugNode(),
  35: new DebugNode(),
  36: new DebugNode(),
  37: new DebugNode(),
  38: new DebugNode(),
  [SyntaxKind.PlusToken]: "+",
  40: new DebugNode(),
  41: new DebugNode(),
  42: new DebugNode(),
  43: new DebugNode(),
  44: new DebugNode(),
  45: new DebugNode(),
  46: new DebugNode(),
  47: new DebugNode(),
  48: new DebugNode(),
  49: new DebugNode(),
  50: new DebugNode(),
  51: new DebugNode(),
  52: new DebugNode(),
  53: new DebugNode(),
  54: new DebugNode(),
  55: new DebugNode(),
  56: new DebugNode(),
  57: new DebugNode(),
  58: new DebugNode(),
  59: new DebugNode(),
  60: new DebugNode(),
  61: new DebugNode(),
  62: new DebugNode(),
  63: new DebugNode(),
  64: new DebugNode(),
  65: new DebugNode(),
  66: new DebugNode(),
  67: new DebugNode(),
  68: new DebugNode(),
  69: new DebugNode(),
  70: new DebugNode(),
  71: new DebugNode(),
  72: new DebugNode(),
  73: new DebugNode(),
  74: new DebugNode(),
  75: new DebugNode(),
  76: new DebugNode(),
  77: new DebugNode(),
  78: new DebugNode(),
  [SyntaxKind.Identifier]: new Inline("identifier", [
    new TextNode("escapedText"),
  ]),
  80: new DebugNode(),
  81: new DebugNode(),
  82: new DebugNode(),
  83: new DebugNode(),
  84: new DebugNode(),
  85: new DebugNode(),
  86: new DebugNode(),
  87: new DebugNode(),
  88: new DebugNode(),
  89: new DebugNode(),
  90: new DebugNode(),
  91: new DebugNode(),
  92: new DebugNode(),
  93: new DebugNode(),
  94: new DebugNode(),
  95: new DebugNode(),
  96: new DebugNode(),
  97: new DebugNode(),
  98: new DebugNode(),
  99: new DebugNode(),
  100: new DebugNode(),
  101: new DebugNode(),
  102: new DebugNode(),
  103: new DebugNode(),
  104: new DebugNode(),
  105: new DebugNode(),
  106: new DebugNode(),
  107: new DebugNode(),
  108: new DebugNode(),
  109: new DebugNode(),
  [SyntaxKind.TrueKeyword]: "true",
  111: new DebugNode(),
  112: new DebugNode(),
  113: new DebugNode(),
  114: new DebugNode(),
  115: new DebugNode(),
  116: new DebugNode(),
  117: new DebugNode(),
  118: new DebugNode(),
  119: new DebugNode(),
  120: new DebugNode(),
  121: new DebugNode(),
  122: new DebugNode(),
  123: new DebugNode(),
  124: new DebugNode(),
  125: new DebugNode(),
  126: new DebugNode(),
  127: new DebugNode(),
  128: new DebugNode(),
  129: new DebugNode(),
  130: new DebugNode(),
  131: new DebugNode(),
  132: new DebugNode(),
  133: new DebugNode(),
  134: new DebugNode(),
  135: new DebugNode(),
  136: new DebugNode(),
  137: new DebugNode(),
  138: new DebugNode(),
  139: new DebugNode(),
  140: new DebugNode(),
  141: new DebugNode(),
  142: new DebugNode(),
  143: new DebugNode(),
  144: new DebugNode(),
  145: new DebugNode(),
  146: new DebugNode(),
  147: new DebugNode(),
  148: new DebugNode(),
  149: new DebugNode(),
  150: new DebugNode(),
  151: new DebugNode(),
  152: new DebugNode(),
  153: new DebugNode(),
  154: new DebugNode(),
  155: new DebugNode(),
  156: new DebugNode(),
  157: new DebugNode(),
  158: new DebugNode(),
  159: new DebugNode(),
  160: new DebugNode(),
  161: new DebugNode(),
  162: new DebugNode(),
  [SyntaxKind.Parameter]: new PropertyNode("name"),
  164: new DebugNode(),
  165: new DebugNode(),
  166: new DebugNode(),
  167: new DebugNode(),
  168: new DebugNode(),
  169: new DebugNode(),
  170: new DebugNode(),
  171: new DebugNode(),
  172: new DebugNode(),
  173: new DebugNode(),
  174: new DebugNode(),
  175: new DebugNode(),
  176: new DebugNode(),
  177: new DebugNode(),
  178: new DebugNode(),
  179: new DebugNode(),
  180: new DebugNode(),
  181: new DebugNode(),
  182: new DebugNode(),
  183: new DebugNode(),
  184: new DebugNode(),
  185: new DebugNode(),
  186: new DebugNode(),
  187: new DebugNode(),
  188: new DebugNode(),
  189: new DebugNode(),
  190: new DebugNode(),
  191: new DebugNode(),
  192: new DebugNode(),
  193: new DebugNode(),
  194: new DebugNode(),
  195: new DebugNode(),
  196: new DebugNode(),
  197: new DebugNode(),
  198: new DebugNode(),
  199: new DebugNode(),
  200: new DebugNode(),
  201: new DebugNode(),
  202: new DebugNode(),
  203: new DebugNode(),
  204: new DebugNode(),
  [SyntaxKind.PropertyAccessExpression]: new Inline("", [
    new PropertyNode("expression"),
    ".",
    new PropertyNode("name"),
  ]),
  206: new DebugNode(),
  [SyntaxKind.CallExpression]: new Inline("", [
    new PropertyNode("expression"),
    "(",
    new EachNode("arguments", ", "),
    ")",
  ]),
  208: new DebugNode(),
  209: new DebugNode(),
  210: new DebugNode(),
  211: new DebugNode(),
  212: new DebugNode(),
  [SyntaxKind.ArrowFunction]: new Inline("", [
    new Inline("keyword", ["function"]),
    "(",
    new EachNode("parameters", ", "),
    "): ",
    new PropertyNode("body"),
  ]),
  214: new DebugNode(),
  215: new DebugNode(),
  216: new DebugNode(),
  217: new DebugNode(),
  218: new DebugNode(),
  219: new DebugNode(),
  [SyntaxKind.BinaryExpression]: new Inline("", [
    new PropertyNode("left"),
    " ",
    new PropertyNode("operatorToken"),
    " ",
    new PropertyNode("right"),
  ]),
  221: new DebugNode(),
  222: new DebugNode(),
  223: new DebugNode(),
  224: new DebugNode(),
  225: new DebugNode(),
  226: new DebugNode(),
  227: new DebugNode(),
  228: new DebugNode(),
  229: new DebugNode(),
  230: new DebugNode(),
  231: new DebugNode(),
  232: new DebugNode(),
  233: new DebugNode(),
  [SyntaxKind.Block]: new Block("indent", [new EachNode("statements")]),
  235: new DebugNode(),
  [SyntaxKind.VariableStatement]: new PropertyNode("declarationList"),
  [SyntaxKind.ExpressionStatement]: new Block("", [
    new PropertyNode("expression"),
  ]),
  [SyntaxKind.IfStatement]: new Block("", [
    new Inline("keyword", ["if"]),
    " ",
    new PropertyNode("expression"),
    ": ",
    new PropertyNode("thenStatement"),
  ]),
  239: new DebugNode(),
  [SyntaxKind.WhileStatement]: new Block("", [
    new Inline("keyword", ["while"]),
    " ",
    new PropertyNode("expression"),
    ": ",
    new PropertyNode("statement"),
  ]),
  241: new DebugNode(),
  242: new DebugNode(),
  243: new DebugNode(),
  244: new DebugNode(),
  245: new DebugNode(),
  246: new DebugNode(),
  247: new DebugNode(),
  248: new DebugNode(),
  249: new DebugNode(),
  250: new DebugNode(),
  251: new DebugNode(),
  252: new DebugNode(),
  [SyntaxKind.VariableDeclaration]: new Inline("", [
    new PropertyNode("name"),
    " = ",
    new PropertyNode("initializer"),
  ]),
  [SyntaxKind.VariableDeclarationList]: new Inline("", [
    new Inline("keyword", ["let"]),
    " ",
    new EachNode("declarations", ", "),
  ]),
  [SyntaxKind.FunctionDeclaration]: new Block("", [
    new Inline("keyword", ["function"]),
    " ",
    new PropertyNode("name"),
    "(",
    new EachNode("parameters", ", "),
    "): ",
    new Block("ident", [new PropertyNode("body")]),
  ]),
  256: new DebugNode(),
  257: new DebugNode(),
  258: new DebugNode(),
  259: new DebugNode(),
  260: new DebugNode(),
  261: new DebugNode(),
  262: new DebugNode(),
  263: new DebugNode(),
  264: new DebugNode(),
  [SyntaxKind.ImportDeclaration]: new Block("", [
    new Inline("keyword", ["import"]),
    " ",
    new PropertyNode("importClause"),
    " ",
    new Inline("keyword", ["from"]),
    " ",
    new PropertyNode("moduleSpecifier"),
  ]),
  [SyntaxKind.ImportClause]: new Inline("", [
    // new PropertyNode("name"),
    new PropertyNode("namedBindings"),
  ]),
  267: new DebugNode(),
  [SyntaxKind.NamedImports]: new Inline("", [
    "{ ",
    new EachNode("elements"),
    " }",
  ]),
  [SyntaxKind.ImportSpecifier]: new Inline("", [new PropertyNode("name")]),
  270: new DebugNode(),
  271: new DebugNode(),
  272: new DebugNode(),
  273: new DebugNode(),
  274: new DebugNode(),
  275: new DebugNode(),
  276: new DebugNode(),
  277: new DebugNode(),
  278: new DebugNode(),
  279: new DebugNode(),
  280: new DebugNode(),
  281: new DebugNode(),
  282: new DebugNode(),
  283: new DebugNode(),
  284: new DebugNode(),
  285: new DebugNode(),
  286: new DebugNode(),
  287: new DebugNode(),
  288: new DebugNode(),
  289: new DebugNode(),
  290: new DebugNode(),
  291: new DebugNode(),
  292: new DebugNode(),
  293: new DebugNode(),
  294: new DebugNode(),
  295: new DebugNode(),
  296: new DebugNode(),
  297: new DebugNode(),
  298: new DebugNode(),
  299: new DebugNode(),
  300: new DebugNode(),
  301: new DebugNode(),
  302: new DebugNode(),
  [SyntaxKind.SourceFile]: new EachNode("statements"),
  304: new DebugNode(),
  305: new DebugNode(),
  306: new DebugNode(),
  307: new DebugNode(),
  308: new DebugNode(),
  309: new DebugNode(),
  310: new DebugNode(),
  311: new DebugNode(),
  312: new DebugNode(),
  313: new DebugNode(),
  314: new DebugNode(),
  315: new DebugNode(),
  316: new DebugNode(),
  317: new DebugNode(),
  318: new DebugNode(),
  319: new DebugNode(),
  320: new DebugNode(),
  321: new DebugNode(),
  322: new DebugNode(),
  323: new DebugNode(),
  324: new DebugNode(),
  325: new DebugNode(),
  326: new DebugNode(),
  327: new DebugNode(),
  328: new DebugNode(),
  329: new DebugNode(),
  330: new DebugNode(),
  331: new DebugNode(),
  332: new DebugNode(),
  333: new DebugNode(),
  334: new DebugNode(),
  335: new DebugNode(),
  336: new DebugNode(),
  337: new DebugNode(),
  338: new DebugNode(),
  339: new DebugNode(),
  340: new DebugNode(),
  341: new DebugNode(),
  342: new DebugNode(),
  343: new DebugNode(),
  344: new DebugNode(),
  345: new DebugNode(),
  346: new DebugNode(),
  347: new DebugNode(),
  348: new DebugNode(),
  349: new DebugNode(),
  350: new DebugNode(),
  351: new DebugNode(),
  352: new DebugNode(),
  353: new DebugNode(),
};
